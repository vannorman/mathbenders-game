Script Execution Order
Cross / circular dependenices. 
"Level builder" enable should "Disable" the entire player without needing (for example) to isolate the Belt Inventory GUI. 
"Level Builder" currently references Game.Player (for example) since Player is not its own class / object, and Game references LevelBuilder (circular).
Using (mutable) objects instead of Modules (?)
- Modules allow me to import one module into another (import LevelBuilder) so I can use it in them)
Tentative use of classes (should replace all objs with classes or ..?)
Modular game pieces where each piece shouldn't know about each other (could rebuild game without them) but they do touch each other - IOC? 
Send relevant connections / links when I instantiate a new class? e.g. New LevelBuilder({objsToDisable:[],player:{}, ..);
Should I have just one "linker" file that communicates between these different scripts? Is it possible to avoid fragility (e.g. dupe code base and want 1/2 of the scripts/objects, but each is linked to each other causing a spaghetti mess with 50% endpoint breakage?)
Data model - e.g place and load objects, track user, save load maps, etc


 consider "class Inventory" (vs const Inventor = {})
consider "mouse down/up" should only care about current item
